as.complex(c)
m <- 1:10
m
dim(m) <- c(2,5)
m
?read.table
?dput
?dump
r <- data.frame(a = 1, b = "a")
dput(r)
install.packages("swirl")
library("swirl")
swirl()
g <- list(foo = 1:3, bar = 5)
g
g[1]
g[[1]]
g[[2]]
g[2]
g$bar
name <- "foo"
name
g[[name]]
h <- list(a = list(10,12,14) b = c(3.14, 2.81))
h <- list(a = list(10,12,14), b = c(3.14, 2.81))
h
h[[c(1,3)]]
h$b
h$b[2]
h[[c(2,2)]]
h[c(2)]
h[2]
h[1
]
h[1,3]
h[[1,2]]
h[[c(1,1)]]
j <- matrix(1:6, 2 ,3)
j
j <- matrix(1:6, 2 ,5)
j <- matrix(1:6, 2 ,4)
j <- matrix(1:6, 2 ,2)
j
j <- matrix(1:6, 3 ,2)
j
j <- matrix(1:6, 1 ,6)
j
j <- matrix(1:6, 2 ,3)
j
j(1,2)
j[1,2]
j[1,2, drop = FALSE]
k <- list(aard = 1:10)
k
k$a
k["a", exact = F]
k[["a", exact = F]]
l <- c(1:5)
l <- c(1, NA, NA, NA, 5)
l
good <- complete.cases(l)
good
l(good)
l[good]
m <- c("a", NA, "n", "b",NA)
m
good <- complete.cases(l,m)
good
l[good]
m[good]
good <- complete.cases(l, m)
good
l
good <- complete.cases(l, m)
good
l[good]
m[good]
good <- complete.cases(l, m)
l[good]
m[good]
poor <- complete.cases(l, m)
l[poor]
read.csv(file.choose())
file <- read.csv(file.choose())
file
head(file)
row(file)
summary(file)
str(file)
tail(file)
file[47]
file(47
)
file[[47
]]
file[47,1]
!complete.cases(file(,1))
!complete.cases(file())
complete.cases(file())
complete.cases(file,)
complete.cases(file,1)
complete.cases(file)
!complete.cases(files)
!complete.cases(file)
str(file)
head(file)
file$Ozone
!complete.cases(file$Ozone)
file$Ozone == NA
file$Ozone(NA)
length(which(file$Ozone == NA))
length(which(file$Ozone < 0))
head(!complete.cases(file))
file[!complete.cases(file)]
file[!complete.cases(file),]
file[!complete.cases(file$Ozone),]
file[!complete.cases(file$Ozone),]
length(file[!complete.cases(file$Ozone),])
file[!complete.cases(file$Ozone),]
length(!complete.cases(file$Ozone),)
length(!complete.cases[file$Ozone),]
length(!complete.cases[file$Ozone,])
length(file[!complete.cases(file)])
length(file[!complete.cases(file)],)
length(file[!complete.cases(file),])
length(file[!complete.cases(file$Ozone),1])
length(file[!complete.cases(file$Ozone),])
length(file[!complete.cases(file$Ozone),1])
file[!complete.cases(file$Ozone),]
file[!complete.cases(file$Ozone),1]
file[!complete.cases(file$Ozone),]
file[!complete.cases(file$Ozone),]
file[!complete.cases(file$Ozone),1]
length(file[!complete.cases(file$Ozone),1])
mean(file[!complete.cases(file$Ozone),1])
mean(file[complete.cases(file$Ozone),1])
file$Ozone > 31
d <- file$Ozone > 31 & file$Temp > 90
d
d <- file$Ozone > 31 && file$Temp > 90
d
e <- file$Temp > 90
d <- file$Ozone > 31
d
e
file_backup <- file
d2 <- isFALSE(d)
d2
which(isFALSE(d))
length(d == F)
length(d == T)
length(d)
?if
d[F]
d[d<31]
d <- file$Ozone < 31
e <- file$Temp < 90
d
e
e
d
d <- file$Ozone < 31
e <- file$Temp < 90
d
e
file <- file$Ozone < 31
head(file)
file
file <- which(file$Ozone < 31)
file <- which(file[file$Ozone < 31])
str(file)
str(file_backup)
head(file_backup)
file_backup$Month
file <- file_backup
file
head(file)
a <- file[!(file$Ozone < 31 & file$Temp)]
a <- file[!(file$Ozone < 31 & file$Temp),]
a
round(file, digits = 0)
a <- file[!(file$Ozone < 31 & file$Temp),]
a
round(file, digits = 0)
file <- round(file, digits = 0)
file
a <- file[!(file$Ozone < 31 & file$Temp),]
a
b <- file[!(file$Ozone < 31 & file$Temp),]
b
file
c <- file[!(file$Ozone < 31 & file$Temp < 90),]
c
mean(c$Solar.R)
c[!complete.cases(c$Ozone),1]
c[complete.cases(c$Ozone),1]
c2 <- c[complete.cases(c$Ozone),1]
c2
mean(c$Solar.R)
c
c <- c[complete.cases(c$Solar.R),1]
c
mean(c)
getwd()
setwd("/home/hefe/R")
#Lists in R
getwd()
setwd("/home/hefe/R")
getwd()
util <- read.csv("Machine-Utilization.csv")
head(util)
tail(util)
summary(util)
str(util)
#Derive utilization column
util$Utilization = 1 - util$Percent.Idle
head(util,12)
#Handling Date-Times in R
tail(util)
#Universal date for R
?POSIXct
util$PosixTime <- as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")
head(util,12)
summary(util)
#TIP: How to rearrange column in a df:
#First tip: remove old timestamp;
util$Timestamp <- NULL
head(util,12)
#Second tip: rearrange column position
util <- util[,c(4,1,2,3)]
head(util,12)
#What is a list?
summary(util)
RL1 <- util[util$Machine=="RL1",]
RL1
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
#Construct list:
#Vector (min,mean,max) excluding unknown hours (NA)
util_stats_rl1 <- c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T),
max(RL1$Utilization, na.rm = T))
util_stats_rl1
#Logical: below 90%, T/F?
#If <0.90 then where in data:
which(RL1$Utilization < 0.90)
#How many times <0.90?;
length(which(RL1$Utilization < 0.90))
#OR True or False answer
length(which(RL1$Utilization < 0.90)) > 0
#Or with as.logical()
as.logical(length(which(RL1$Utilization < 0.90)))
util_under_90_flag <- length(which(RL1$Utilization < 0.90)) > 0
util_under_90_flag
list_rl1 <- list("RL1", util_stats_rl1, util_under_90_flag)
list_rl1
#Making components of a list
list_rl1
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "90%Threshold")
list_rl1
#Another way. Like with dataframes:
rm(list_rl1)
list_rl1 <- list(Machine="RL1", Stats=util_stats_rl1, LowThreshold=util_under_90_flag)
list_rl1
#Extracting components of a list
#Three ways
#[] - will always return a list
#[[]] - will always return the actual object
#$ - sames as [[]] but prettier
list_rl1
list_rl1[1]
list_rl1[[1]]
list_rl1$Machine
list_rl1[2]
typeof(list_rl1[2])
list_rl1[[2]]
typeof(list_rl1[[2]])
list_rl1[[3]]
typeof(list_rl1[[3]])
list_rl1$LowThreshold
#How to get to max of stats
list_rl1$Stats[3]
list_rl1[[2]][3]
#Adding and deleting list components
list_rl1
list_rl1[13] <- "new information"
list_rl1
#another way to add via the $ sign
#We will add:
#Vector: All hours where utilization is unknown (NA)
RL1[is.na(RL1$Utilization),"PosixTime"]
#Add via the $ sign
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#Now remove component: using the NULL method
list_rl1[4] = NULL
list_rl1[c(5,6,7,8,9,10,11,12)] = NULL
#numeration has shifted!
list_rl1
#Add another component:
list_rl1$Data <- RL1
list_rl1
summary(list_rl1)
str(list_rl1)
#Subsetting a list
list_rl1
#Quick Challenge
list_rl1$UnknownHours[1]
list_rl1[[4]][1]
#Let's proceed...
list_rl1
list_rl1[1]
list_rl1[1:2]
list_rl1[1:3]
list_rl1[c(1,4)]
sublist_rl1 <-list_rl1[c("UnknownHours", "Stats")]
sublist_rl1
sublist_rl1[[2]][2]
#Double Square Brackets [[]] are NOT for Subsetting:
list_rl1[[1:3]] #Error
#See doesn't work
#You can only access 1 thing;
# A single component using [[]]
#Building a TimeSeries Plot
library(ggplot2)
p <- ggplot(data=util)
p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
?linetype
myplot <- p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
#Add picture/plot in list
list_rl1$Plot <- myplot
head(list_rl1)
summary(list_rl1)
str(list_rl1)
list_rl1 <- list("RL1", util_stats_rl1, util_under_90_flag)
#Vector (min,mean,max) excluding unknown hours (NA)
util_stats_rl1 <- c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T),
max(RL1$Utilization, na.rm = T))
util <- read.csv("Machine-Utilization.csv")
getwd()
setwd("/home/hefe/R")
getwd()
util <- read.csv("Machine-Utilization.csv")
setwd("/home/hefe/R/R-Advanced")
getwd()
util <- read.csv("Machine-Utilization.csv")
util <- read.csv("Machine-Utilization.csv")
head(util)
tail(util)
summary(util)
str(util)
#Derive utilization column
util$Utilization = 1 - util$Percent.Idle
head(util,12)
#Handling Date-Times in R
tail(util)
#Universal date for R
?POSIXct
util$PosixTime <- as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")
head(util,12)
summary(util)
#TIP: How to rearrange column in a df:
#First tip: remove old timestamp;
util$Timestamp <- NULL
head(util,12)
#Second tip: rearrange column position
util <- util[,c(4,1,2,3)]
head(util,12)
#What is a list?
summary(util)
RL1 <- util[util$Machine=="RL1",]
RL1
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
#Construct list:
#Vector (min,mean,max) excluding unknown hours (NA)
util_stats_rl1 <- c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T),
max(RL1$Utilization, na.rm = T))
util_stats_rl1
#Logical: below 90%, T/F?
#If <0.90 then where in data:
which(RL1$Utilization < 0.90)
#How many times <0.90?;
length(which(RL1$Utilization < 0.90))
#OR True or False answer
length(which(RL1$Utilization < 0.90)) > 0
#Or with as.logical()
as.logical(length(which(RL1$Utilization < 0.90)))
util_under_90_flag <- length(which(RL1$Utilization < 0.90)) > 0
util_under_90_flag
list_rl1 <- list("RL1", util_stats_rl1, util_under_90_flag)
list_rl1
#Making components of a list
list_rl1
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "90%Threshold")
list_rl1
#Another way. Like with dataframes:
rm(list_rl1)
list_rl1 <- list(Machine="RL1", Stats=util_stats_rl1, LowThreshold=util_under_90_flag)
list_rl1
#Extracting components of a list
#Three ways
#[] - will always return a list
#[[]] - will always return the actual object
#$ - sames as [[]] but prettier
list_rl1
list_rl1[1]
list_rl1[[1]]
list_rl1$Machine
list_rl1[2]
typeof(list_rl1[2])
list_rl1[[2]]
typeof(list_rl1[[2]])
list_rl1[[3]]
typeof(list_rl1[[3]])
list_rl1$LowThreshold
#How to get to max of stats
list_rl1$Stats[3]
list_rl1[[2]][3]
#Adding and deleting list components
list_rl1
list_rl1[13] <- "new information"
list_rl1
#another way to add via the $ sign
#We will add:
#Vector: All hours where utilization is unknown (NA)
RL1[is.na(RL1$Utilization),"PosixTime"]
#Add via the $ sign
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#Now remove component: using the NULL method
list_rl1[4] = NULL
list_rl1[c(5,6,7,8,9,10,11,12)] = NULL
#numeration has shifted!
list_rl1
#Add another component:
list_rl1$Data <- RL1
list_rl1
summary(list_rl1)
str(list_rl1)
#Subsetting a list
list_rl1
#Quick Challenge
list_rl1$UnknownHours[1]
list_rl1[[4]][1]
#Let's proceed...
list_rl1
list_rl1[1]
list_rl1[1:2]
list_rl1[1:3]
list_rl1[c(1,4)]
sublist_rl1 <-list_rl1[c("UnknownHours", "Stats")]
sublist_rl1
sublist_rl1[[2]][2]
#Double Square Brackets [[]] are NOT for Subsetting:
list_rl1[[1:3]] #Error
#See doesn't work
#You can only access 1 thing;
# A single component using [[]]
#Building a TimeSeries Plot
library(ggplot2)
p <- ggplot(data=util)
p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
?linetype
myplot <- p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
#Add picture/plot in list
list_rl1$Plot <- myplot
head(list_rl1)
summary(list_rl1)
str(list_rl1)
#Building a TimeSeries Plot
library(ggplot2)
p <- ggplot(data=util)
p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
?linetype
myplot <- p + geom_line(aes(x=PosixTime, y=Utilization, colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Black", size=1.2,
linetype=3)
#Add picture/plot in list
list_rl1$Plot <- myplot
head(list_rl1)
summary(list_rl1)
str(list_rl1)
View(RL1)
